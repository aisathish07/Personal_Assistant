# first_run_wizard.py - Interactive first-run setup wizard
import tkinter as tk
import customtkinter as ctk
from pathlib import Path
import os
import subprocess
import webbrowser
from typing import Optional
import json

ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")


class FirstRunWizard:
    """Interactive setup wizard for first-time Jarvis users"""
    
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("Jarvis Setup Wizard")
        self.root.geometry("800x600")
        self.root.resizable(False, False)
        
        # Center window
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (800 // 2)
        y = (self.root.winfo_screenheight() // 2) - (600 // 2)
        self.root.geometry(f"+{x}+{y}")
        
        # Setup data
        self.config = {
            "gemini_api_key": "",
            "elevenlabs_api_key": "",
            "auto_start": True,
            "web_agent_mode": "balanced",
            "whisper_model": "base",
            "hotkey": "ctrl+space",
            "install_ollama": False,
        }
        
        self.current_page = 0
        self.pages = [
            self.create_welcome_page,
            self.create_system_check_page,
            self.create_api_keys_page,
            self.create_performance_page,
            self.create_features_page,
            self.create_final_page,
        ]
        
        # Main container
        self.container = ctk.CTkFrame(self.root)
        self.container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Navigation buttons
        self.nav_frame = ctk.CTkFrame(self.root)
        self.nav_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        self.back_btn = ctk.CTkButton(
            self.nav_frame,
            text="‚Üê Back",
            command=self.prev_page,
            width=100,
            state="disabled"
        )
        self.back_btn.pack(side="left", padx=5)
        
        self.next_btn = ctk.CTkButton(
            self.nav_frame,
            text="Next ‚Üí",
            command=self.next_page,
            width=100,
            fg_color="#00ff88",
            text_color="black"
        )
        self.next_btn.pack(side="right", padx=5)
        
        self.cancel_btn = ctk.CTkButton(
            self.nav_frame,
            text="Cancel",
            command=self.cancel,
            width=100,
            fg_color="gray"
        )
        self.cancel_btn.pack(side="right", padx=5)
        
        # Show first page
        self.show_page(0)
    
    def clear_container(self):
        """Clear current page"""
        for widget in self.container.winfo_children():
            widget.destroy()
    
    def show_page(self, page_num: int):
        """Display specific page"""
        self.clear_container()
        self.current_page = page_num
        self.pages[page_num]()
        
        # Update navigation
        self.back_btn.configure(state="normal" if page_num > 0 else "disabled")
        
        if page_num == len(self.pages) - 1:
            self.next_btn.configure(text="Finish", fg_color="#00ff00")
        else:
            self.next_btn.configure(text="Next ‚Üí", fg_color="#00ff88")
    
    def next_page(self):
        """Go to next page"""
        if self.current_page == len(self.pages) - 1:
            self.finish()
        else:
            self.show_page(self.current_page + 1)
    
    def prev_page(self):
        """Go to previous page"""
        if self.current_page > 0:
            self.show_page(self.current_page - 1)
    
    def cancel(self):
        """Cancel setup"""
        self.root.quit()
    
    def finish(self):
        """Complete setup"""
        try:
            self.save_config()
            ctk.CTkMessagebox(
                title="Setup Complete!",
                message="Jarvis is now configured and ready to use!\n\nClick OK to launch Jarvis.",
                icon="check"
            )
            self.root.quit()
            # Launch Jarvis
            subprocess.Popen(["python", "main_standalone.py"])
        except Exception as e:
            ctk.CTkMessagebox(
                title="Error",
                message=f"Setup failed:\n{e}",
                icon="cancel"
            )
    
    def save_config(self):
        """Save configuration to .env"""
        env_content = f"""# Jarvis Assistant Configuration
# Generated by Setup Wizard

# === API KEYS ===
GEMINI_API_KEY={self.config['gemini_api_key']}
ELEVENLABS_API_KEY={self.config['elevenlabs_api_key']}

# === PERFORMANCE ===
WEB_AGENT_MODE={self.config['web_agent_mode']}
WHISPER_MODEL_SIZE={self.config['whisper_model']}
WEB_AGENT_ENABLED=true
WEB_AGENT_VISION_ENABLED=true

# === LLM ===
LLM_PRIORITY=["gemini", "ollama"]
LOCAL_ONLY=false

# === TTS ===
TTS_PRIORITY=["elevenlabs", "gtts", "piper"]

# === SYSTEM ===
AUTO_START={str(self.config['auto_start']).lower()}
HOTKEY={self.config['hotkey']}
"""
        
        with open(".env", "w") as f:
            f.write(env_content)
        
        # Create first-run marker
        Path("cache").mkdir(exist_ok=True)
        (Path("cache") / ".first_run_complete").touch()
    
    # ===== PAGE CREATORS =====
    
    def create_welcome_page(self):
        """Welcome page"""
        frame = ctk.CTkFrame(self.container)
        frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Title
        title = ctk.CTkLabel(
            frame,
            text="Welcome to Jarvis! ü§ñ",
            font=("Arial", 32, "bold")
        )
        title.pack(pady=(40, 20))
        
        # Subtitle
        subtitle = ctk.CTkLabel(
            frame,
            text="Your Personal AI Assistant",
            font=("Arial", 18)
        )
        subtitle.pack(pady=(0, 40))
        
        # Features
        features_frame = ctk.CTkFrame(frame, fg_color="transparent")
        features_frame.pack(pady=20)
        
        features = [
            "üé§ Voice-activated with 'Hey Jarvis' wake word",
            "üß† Powered by Google Gemini AI",
            "üåê Web browsing and automation",
            "üì± Control your applications",
            "‚è∞ Smart reminders and scheduling",
            "üí¨ Natural conversation with memory",
        ]
        
        for feature in features:
            label = ctk.CTkLabel(
                features_frame,
                text=feature,
                font=("Arial", 14),
                anchor="w"
            )
            label.pack(anchor="w", pady=5, padx=40)
        
        # System info
        import psutil
        ram = psutil.virtual_memory().total / (1024**3)
        
        info = ctk.CTkLabel(
            frame,
            text=f"Detected System: {ram:.0f}GB RAM | Windows {os.sys.version.split()[0]}",
            font=("Arial", 12),
            text_color="gray"
        )
        info.pack(pady=(40, 20))
    
    def create_system_check_page(self):
        """System requirements check"""
        frame = ctk.CTkScrollableFrame(self.container)
        frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        title = ctk.CTkLabel(
            frame,
            text="System Check",
            font=("Arial", 24, "bold")
        )
        title.pack(pady=(20, 30))
        
        # Check items
        checks = [
            ("Python 3.10+", self.check_python()),
            ("FFmpeg (Audio)", self.check_ffmpeg()),
            ("Internet Connection", self.check_internet()),
            ("Microphone Access", self.check_microphone()),
            ("16GB+ RAM", self.check_ram()),
            ("Disk Space (5GB)", self.check_disk()),
        ]
        
        for name, status in checks:
            self.create_check_item(frame, name, status)
        
        # Warning if any failed
        if not all(s for _, s in checks):
            warning = ctk.CTkLabel(
                frame,
                text="‚ö†Ô∏è Some checks failed. You can continue, but some features may not work.",
                font=("Arial", 12),
                text_color="orange",
                wraplength=600
            )
            warning.pack(pady=20)
    
    def create_check_item(self, parent, name: str, passed: bool):
        """Create a check item"""
        item = ctk.CTkFrame(parent, fg_color="#2b2b2b")
        item.pack(fill="x", padx=20, pady=5)
        
        icon = "‚úÖ" if passed else "‚ùå"
        color = "#00ff88" if passed else "#ff4444"
        
        label = ctk.CTkLabel(
            item,
            text=f"{icon} {name}",
            font=("Arial", 14),
            text_color=color
        )
        label.pack(side="left", padx=20, pady=10)
        
        if not passed and name == "FFmpeg (Audio)":
            btn = ctk.CTkButton(
                item,
                text="Install FFmpeg",
                command=lambda: webbrowser.open("https://ffmpeg.org/download.html"),
                width=120,
                height=30
            )
            btn.pack(side="right", padx=10)
    
    def create_api_keys_page(self):
        """API keys configuration"""
        frame = ctk.CTkScrollableFrame(self.container)
        frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        title = ctk.CTkLabel(
            frame,
            text="API Keys Setup",
            font=("Arial", 24, "bold")
        )
        title.pack(pady=(20, 10))
        
        subtitle = ctk.CTkLabel(
            frame,
            text="Required for Jarvis to function properly",
            font=("Arial", 14),
            text_color="gray"
        )
        subtitle.pack(pady=(0, 30))
        
        # Gemini API Key (Required)
        self.create_api_input(
            frame,
            "Google Gemini API Key (Required)",
            "gemini_api_key",
            "https://ai.google.dev",
            "Get free API key from Google AI Studio",
            required=True
        )
        
        # ElevenLabs (Optional)
        self.create_api_input(
            frame,
            "ElevenLabs API Key (Optional)",
            "elevenlabs_api_key",
            "https://elevenlabs.io",
            "For premium text-to-speech voice quality",
            required=False
        )
        
        # Local mode option
        local_var = tk.BooleanVar(value=False)
        local_check = ctk.CTkCheckBox(
            frame,
            text="üîí Use Local Mode (No external API calls, requires Ollama)",
            variable=local_var,
            font=("Arial", 12)
        )
        local_check.pack(pady=20)
    
    def create_api_input(self, parent, label: str, key: str, url: str, help_text: str, required: bool):
        """Create API key input field"""
        container = ctk.CTkFrame(parent, fg_color="#2b2b2b")
        container.pack(fill="x", padx=20, pady=10)
        
        # Label
        title = ctk.CTkLabel(
            container,
            text=label,
            font=("Arial", 14, "bold"),
            anchor="w"
        )
        title.pack(fill="x", padx=20, pady=(15, 5))
        
        # Help text
        help_label = ctk.CTkLabel(
            container,
            text=help_text,
            font=("Arial", 11),
            text_color="gray",
            anchor="w"
        )
        help_label.pack(fill="x", padx=20, pady=(0, 10))
        
        # Input frame
        input_frame = ctk.CTkFrame(container, fg_color="transparent")
        input_frame.pack(fill="x", padx=20, pady=(0, 10))
        
        # Entry
        entry = ctk.CTkEntry(
            input_frame,
            placeholder_text="Enter API key here..." if required else "Optional",
            width=400
        )
        entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        entry.bind("<KeyRelease>", lambda e: self.update_config(key, entry.get()))
        
        # Get key button
        btn = ctk.CTkButton(
            input_frame,
            text="Get Key",
            command=lambda: webbrowser.open(url),
            width=100,
            height=30
        )
        btn.pack(side="right")
        
        # Test button
        test_btn = ctk.CTkButton(
            input_frame,
            text="Test",
            command=lambda: self.test_api_key(key, entry.get()),
            width=80,
            height=30,
            fg_color="gray"
        )
        test_btn.pack(side="right", padx=(0, 5))
    
    def create_performance_page(self):
        """Performance settings"""
        frame = ctk.CTkScrollableFrame(self.container)
        frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        title = ctk.CTkLabel(
            frame,
            text="Performance Settings",
            font=("Arial", 24, "bold")
        )
        title.pack(pady=(20, 30))
        
        # Detect system
        import psutil
        ram_gb = psutil.virtual_memory().total / (1024**3)
        
        recommendation = "balanced" if ram_gb >= 14 else "lightweight"
        
        info = ctk.CTkLabel(
            frame,
            text=f"Detected: {ram_gb:.1f}GB RAM\nRecommended: {recommendation.upper()} mode",
            font=("Arial", 14),
            text_color="#00ff88"
        )
        info.pack(pady=(0, 20))
        
        # Web Agent Mode
        mode_frame = ctk.CTkFrame(frame, fg_color="#2b2b2b")
        mode_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(
            mode_frame,
            text="Web Agent Performance Mode:",
            font=("Arial", 14, "bold")
        ).pack(anchor="w", padx=20, pady=(15, 10))
        
        mode_var = tk.StringVar(value=recommendation)
        
        modes = [
            ("lightweight", "ü™∂ Lightweight", "300MB RAM, basic features"),
            ("balanced", "‚öñÔ∏è Balanced", "600MB RAM, recommended for 16GB"),
            ("full", "üöÄ Full Power", "1GB RAM, all features enabled"),
        ]
        
        for value, label, desc in modes:
            radio = ctk.CTkRadioButton(
                mode_frame,
                text=f"{label}\n{desc}",
                variable=mode_var,
                value=value,
                command=lambda v=value: self.update_config("web_agent_mode", v)
            )
            radio.pack(anchor="w", padx=30, pady=5)
        
        # Whisper Model
        whisper_frame = ctk.CTkFrame(frame, fg_color="#2b2b2b")
        whisper_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(
            whisper_frame,
            text="Speech Recognition Model:",
            font=("Arial", 14, "bold")
        ).pack(anchor="w", padx=20, pady=(15, 10))
        
        whisper_var = tk.StringVar(value="base")
        
        whisper_models = [
            ("tiny", "üèÉ Tiny (Fast, lower accuracy)"),
            ("base", "‚ö° Base (Balanced - Recommended)"),
            ("small", "üéØ Small (Better accuracy, slower)"),
        ]
        
        for value, label in whisper_models:
            radio = ctk.CTkRadioButton(
                whisper_frame,
                text=label,
                variable=whisper_var,
                value=value,
                command=lambda v=value: self.update_config("whisper_model", v)
            )
            radio.pack(anchor="w", padx=30, pady=5)
    
    def create_features_page(self):
        """Feature selection"""
        frame = ctk.CTkScrollableFrame(self.container)
        frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        title = ctk.CTkLabel(
            frame,
            text="Feature Configuration",
            font=("Arial", 24, "bold")
        )
        title.pack(pady=(20, 30))
        
        # Auto-start
        auto_var = tk.BooleanVar(value=True)
        ctk.CTkCheckBox(
            frame,
            text="üöÄ Start Jarvis automatically when Windows starts",
            variable=auto_var,
            font=("Arial", 13),
            command=lambda: self.update_config("auto_start", auto_var.get())
        ).pack(anchor="w", padx=30, pady=10)
        
        # Install Ollama
        ollama_var = tk.BooleanVar(value=False)
        ollama_check = ctk.CTkCheckBox(
            frame,
            text="üß† Install Ollama (Local LLM for offline use)",
            variable=ollama_var,
            font=("Arial", 13),
            command=lambda: self.update_config("install_ollama", ollama_var.get())
        )
        ollama_check.pack(anchor="w", padx=30, pady=10)
        
        ctk.CTkButton(
            frame,
            text="Learn about Ollama",
            command=lambda: webbrowser.open("https://ollama.ai"),
            width=150,
            height=30,
            fg_color="gray"
        ).pack(anchor="w", padx=50, pady=(0, 20))
        
        # Hotkey info
        hotkey_frame = ctk.CTkFrame(frame, fg_color="#2b2b2b")
        hotkey_frame.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkLabel(
            hotkey_frame,
            text="‚å®Ô∏è Global Hotkey",
            font=("Arial", 14, "bold")
        ).pack(anchor="w", padx=20, pady=(15, 10))
        
        ctk.CTkLabel(
            hotkey_frame,
            text="Default: Ctrl+Space\n(Can be changed later in settings)",
            font=("Arial", 12),
            text_color="gray"
        ).pack(anchor="w", padx=20, pady=(0, 15))
    
    def create_final_page(self):
        """Final confirmation page"""
        frame = ctk.CTkFrame(self.container)
        frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        title = ctk.CTkLabel(
            frame,
            text="Setup Complete! üéâ",
            font=("Arial", 32, "bold")
        )
        title.pack(pady=(40, 20))
        
        subtitle = ctk.CTkLabel(
            frame,
            text="Jarvis is ready to become your personal assistant",
            font=("Arial", 16)
        )
        subtitle.pack(pady=(0, 40))
        
        # Summary
        summary_frame = ctk.CTkFrame(frame, fg_color="#2b2b2b")
        summary_frame.pack(fill="both", expand=True, padx=40, pady=20)
        
        ctk.CTkLabel(
            summary_frame,
            text="Configuration Summary",
            font=("Arial", 18, "bold")
        ).pack(pady=(20, 15))
        
        summary_items = [
            ("üîë Gemini API", "Configured" if self.config['gemini_api_key'] else "Not set"),
            ("‚ö° Performance", self.config['web_agent_mode'].upper()),
            ("üé§ Speech Model", self.config['whisper_model'].upper()),
            ("üöÄ Auto-start", "Enabled" if self.config['auto_start'] else "Disabled"),
        ]
        
        for label, value in summary_items:
            item_frame = ctk.CTkFrame(summary_frame, fg_color="transparent")
            item_frame.pack(fill="x", padx=20, pady=5)
            
            ctk.CTkLabel(
                item_frame,
                text=label,
                font=("Arial", 13),
                anchor="w"
            ).pack(side="left", padx=10)
            
            ctk.CTkLabel(
                item_frame,
                text=value,
                font=("Arial", 13, "bold"),
                text_color="#00ff88",
                anchor="e"
            ).pack(side="right", padx=10)
        
        # Quick tips
        tips_frame = ctk.CTkFrame(frame, fg_color="#2b2b2b")
        tips_frame.pack(fill="x", padx=40, pady=20)
        
        ctk.CTkLabel(
            tips_frame,
            text="Quick Tips",
            font=("Arial", 16, "bold")
        ).pack(pady=(15, 10))
        
        tips = [
            "Say 'Hey Jarvis' to activate voice control",
            "Press Ctrl+Space for manual activation",
            "Click the floating orb for quick commands",
            "Right-click the system tray icon for settings",
        ]
        
        for tip in tips:
            ctk.CTkLabel(
                tips_frame,
                text=f"‚Ä¢ {tip}",
                font=("Arial", 12),
                anchor="w"
            ).pack(anchor="w", padx=30, pady=3)
        
        tips_frame.pack(pady=(0, 20))
    
    # ===== HELPER METHODS =====
    
    def update_config(self, key: str, value):
        """Update configuration"""
        self.config[key] = value
    
    def test_api_key(self, key: str, value: str):
        """Test API key"""
        # TODO: Implement API key testing
        ctk.CTkMessagebox(
            title="Test API Key",
            message="API key testing coming soon!",
            icon="info"
        )
    
    def check_python(self) -> bool:
        """Check Python version"""
        import sys
        return sys.version_info >= (3, 10)
    
    def check_ffmpeg(self) -> bool:
        """Check FFmpeg installation"""
        try:
            subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True)
            return True
        except:
            return False
    
    def check_internet(self) -> bool:
        """Check internet connection"""
        try:
            import urllib.request
            urllib.request.urlopen('http://www.google.com', timeout=3)
            return True
        except:
            return False
    
    def check_microphone(self) -> bool:
        """Check microphone access"""
        try:
            import sounddevice as sd
            devices = sd.query_devices()
            return any(d['max_input_channels'] > 0 for d in devices)
        except:
            return False
    
    def check_ram(self) -> bool:
        """Check RAM"""
        import psutil
        return psutil.virtual_memory().total >= 14 * 1024**3
    
    def check_disk(self) -> bool:
        """Check disk space"""
        import psutil
        return psutil.disk_usage('.').free >= 5 * 1024**3
    
    def run(self):
        """Start wizard"""
        self.root.mainloop()


def should_run_wizard() -> bool:
    """Check if first-run wizard should run"""
    marker = Path("cache") / ".first_run_complete"
    env_exists = Path(".env").exists()
    
    return not marker.exists() or not env_exists


if __name__ == "__main__":
    if should_run_wizard():
        wizard = FirstRunWizard()
        wizard.run()
    else:
        print("Setup already complete. Use settings_dialog.py to reconfigure.")